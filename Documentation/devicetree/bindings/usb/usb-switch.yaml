# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/usb/usb-switch.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: USB Orientation and Mode Switches Common Properties

maintainers:
  - Greg Kroah-Hartman <gregkh@linuxfoundation.org>

description:
  Common properties for devices handling USB mode and orientation switching.

properties:
  mode-switch:
    description: Possible handler of altmode switching
    type: boolean

  orientation-switch:
    description: Possible handler of orientation switching
    type: boolean

  retimer-switch:
    description: Possible handler of SuperSpeed signals retiming
    type: boolean

  port:
    $ref: /schemas/graph.yaml#/properties/port
    description:
      A port node to link the device to a TypeC controller for the purpose of
      handling altmode muxing and orientation switching.

  ports:
    $ref: /schemas/graph.yaml#/properties/ports
    properties:
      port@0:
        $ref: /schemas/graph.yaml#/$defs/port-base
        unevaluatedProperties: false

        properties:
          endpoint:
            $ref: '#/$defs/usbc-out-endpoint'

      port@1:
        $ref: /schemas/graph.yaml#/$defs/port-base
        description:
          Super Speed (SS) Input endpoint from the Super-Speed PHY
        unevaluatedProperties: false

        properties:
          endpoint:
            $ref: '#/$defs/usbc-in-endpoint'

      port@2:
        $ref: /schemas/graph.yaml#/$defs/port-base
        unevaluatedProperties: false

        properties:
          endpoint:
            $ref: '#/$defs/dp-endpoint'

oneOf:
  - required:
      - port
  - required:
      - ports

additionalProperties: true

$defs:
  usbc-out-endpoint:
    $ref: /schemas/graph.yaml#/$defs/endpoint-base
    description: Super Speed (SS) output endpoint to a type-c connector
    unevaluatedProperties: false
    properties:
      data-lanes:
        $ref: /schemas/types.yaml#/definitions/uint32-array
        description: |
          An array of physical USB Type-C data lane indexes.
          - 0 is SSRX1 lane
          - 1 is SSTX1 lane
          - 2 is SSTX2 lane
          - 3 is SSRX2 lane
        minItems: 4
        maxItems: 4
        items:
          maximum: 3

  usbc-in-endpoint:
    $ref: /schemas/graph.yaml#/$defs/endpoint-base
    description: Super Speed (SS) input endpoint from the Super Speed PHY
    unevaluatedProperties: false
    properties:
      data-lanes:
        $ref: /schemas/types.yaml#/definitions/uint32-array
        minItems: 1
        maxItems: 8
        uniqueItems: true
        items:
          maximum: 8

  dp-endpoint:
    $ref: /schemas/graph.yaml#/$defs/endpoint-base
    description: DisplayPort (DP) input from the DP PHY
    unevaluatedProperties: false
    properties:
      data-lanes:
        $ref: /schemas/types.yaml#/definitions/uint32-array
        description: |
          An array of physical DP data lane indexes
          - 0 is DP ML0 lane
          - 1 is DP ML1 lane
          - 2 is DP ML2 lane
          - 3 is DP ML3 lane
        oneOf:
          - items:
              - const: 0
              - const: 1
          - items:
              - const: 0
              - const: 1
              - const: 2
              - const: 3

examples:
  # A USB + DP mode and orientation switch which muxes DP altmode
  # and USB onto a usb-c-connector node.
  - |
    device {
      mode-switch;
      orientation-switch;

      ports {
        #address-cells = <1>;
        #size-cells = <0>;

        port@0 {
          reg = <0>;
          #address-cells = <1>;
          #size-cells = <0>;

          endpoint {
            remote-endpoint = <&usb_c_connector>;
            data-lanes = <0 1 2 3>;
          };
        };

        port@1 {
          reg = <1>;
          #address-cells = <1>;
          #size-cells = <0>;

          endpoint {
            remote-endpoint = <&usb_ss_phy>;
          };
        };

        port@2 {
          reg = <2>;
          #address-cells = <1>;
          #size-cells = <0>;

          endpoint {
            remote-endpoint = <&dp_phy>;
            data-lanes = <0 1 2 3>;
          };
        };
      };
    };

  # A USB orientation switch which flips the pin orientation
  # for a usb-c-connector node.
  - |
    device {
      orientation-switch;

      ports {
        #address-cells = <1>;
        #size-cells = <0>;

        port@0 {
          reg = <0>;
          #address-cells = <1>;
          #size-cells = <0>;

          endpoint {
            remote-endpoint = <&usb_c_connector>;
          };
        };

        port@1 {
          reg = <1>;
          #address-cells = <1>;
          #size-cells = <0>;

          endpoint {
            remote-endpoint = <&usb_ss_phy>;
          };
        };
      };
    };

...
