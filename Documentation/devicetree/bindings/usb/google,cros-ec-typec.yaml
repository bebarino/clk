# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/usb/google,cros-ec-typec.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Google ChromeOS EC (Embedded Controller) USB Type-C Port Manager

maintainers:
  - Benson Leung <bleung@chromium.org>
  - Prashant Malani <pmalani@chromium.org>

description:
  Chrome OS devices have an Embedded Controller (EC) which has access to
  USB Type-C port state. This node is intended to allow the host to read and
  control the Type-C ports. The node for this device should be under a
  cros-ec node with a compatible like "google,cros-ec-spi".

properties:
  compatible:
    const: google,cros-ec-typec

  '#address-cells':
    const: 1

  '#size-cells':
    const: 0

  mux-gpios:
    description: GPIOs indicating which way the DP mux is steered
    minItems: 1
    maxItems: 3

  no-hpd:
    description: Indicates this device doesn't signal HPD for DisplayPort
    type: boolean

  ports:
    $ref: /schemas/graph.yaml#/properties/ports

    properties:
      port@0:
        $ref: /schemas/graph.yaml#/properties/port
        description:
          Input port for DisplayPort (DP)

patternProperties:
  '^connector@[0-9a-f]+$':
    $ref: /schemas/connector/usb-connector.yaml#
    required:
      - reg

required:
  - compatible

allOf:
  - if:
      required:
        - no-hpd
    then:
      properties:
        ports:
          required:
            - port@0
  - if:
      required:
        - mux-gpios
    then:
      properties:
        ports:
          required:
            - port@0

additionalProperties: false

examples:
  - |+
    #include <dt-bindings/gpio/gpio.h>

    spi {
      #address-cells = <1>;
      #size-cells = <0>;

      cros_ec: ec@0 {
        compatible = "google,cros-ec-spi";
        reg = <0>;
        interrupts = <35 0>;
        #gpio-cells = <2>;
        gpio-controller;

        typec {
          compatible = "google,cros-ec-typec";

          #address-cells = <1>;
          #size-cells = <0>;

          mux-gpios = <&cros_ec 42 GPIO_ACTIVE_HIGH>, <&cros_ec 3 GPIO_ACTIVE_HIGH>;

          connector@0 {
            compatible = "usb-c-connector";
            reg = <0>;
            power-role = "dual";
            data-role = "dual";
            try-power-role = "source";

            ports {
              #address-cells = <1>;
              #size-cells = <0>;

              port@0 {
                reg = <0>;
                usb_c0_hs: endpoint {
                  remote-endpoint = <&usb_hub_dfp3_hs>;
                };
              };

              port@1 {
                reg = <1>;
                usb_c0_ss: endpoint {
                  remote-endpoint = <&usb_hub_dfp3_ss>;
                };
              };
            };
          };

          connector@1 {
            compatible = "usb-c-connector";
            reg = <1>;
            power-role = "dual";
            data-role = "dual";
            try-power-role = "source";

            ports {
              #address-cells = <1>;
              #size-cells = <0>;

              port@0 {
                reg = <0>;
                usb_c1_hs: endpoint {
                  remote-endpoint = <&usb_hub_dfp2_hs>;
                };
              };

              port@1 {
                reg = <1>;
                usb_c1_ss: endpoint {
                  remote-endpoint = <&usb_hub_dfp2_ss>;
                };
              };
            };
          };

          ports {
            #address-cells = <1>;
            #size-cells = <0>;

            port@0 {
              reg = <0>;
              dp_in: endpoint {
                remote-endpoint = <&dp_phy>;
              };
            };
          };
        };
      };
    };
