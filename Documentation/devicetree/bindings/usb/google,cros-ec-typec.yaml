# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/usb/google,cros-ec-typec.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Google Chrome OS Embedded Controller (EC) USB type-c port driver

maintainers:
  - Benson Leung <bleung@chromium.org>
  - Prashant Malani <pmalani@chromium.org>

description:
  Chrome OS devices have an Embedded Controller(EC) which has access to
  Type C port state. This node is intended to allow the host to read and
  control the Type C ports. The node for this device should be under a
  cros-ec node like google,cros-ec-spi.

properties:
  compatible:
    const: google,cros-ec-typec

  '#address-cells':
    const: 1

  '#size-cells':
    const: 0

  mux-gpios:
    description: GPIOs indicating which way the DP mux is steered
    maxItems: 1

  no-hpd:
    description: Indicates this endpoint doesn't signal HPD for DisplayPort
    type: boolean

  mode-switch:
    $ref: usb-switch.yaml#properties/mode-switch

  orientation-switch:
    $ref: usb-switch.yaml#properties/orientation-switch

  ports:
    $ref: /schemas/graph.yaml#/properties/ports

    properties:
      port@0:
        $ref: /schemas/graph.yaml#/$defs/port-base
        unevaluatedProperties: false
        description: Output ports for combined DP and USB SS data
        patternProperties:
          "^endpoint@([0-8])$":
            $ref: usb-switch.yaml#/$defs/usbc-out-endpoint
            unevaluatedProperties: false

        anyOf:
          - required:
              - endpoint@0
          - required:
              - endpoint@1
          - required:
              - endpoint@2
          - required:
              - endpoint@3
          - required:
              - endpoint@4
          - required:
              - endpoint@5
          - required:
              - endpoint@6
          - required:
              - endpoint@7
          - required:
              - endpoint@8

      port@1:
        $ref: /schemas/graph.yaml#/$defs/port-base
        unevaluatedProperties: false
        description:
          Input port to receive USB SuperSpeed (SS) data
        patternProperties:
          "^endpoint@([0-8])$":
            $ref: usb-switch.yaml#/$defs/usbc-in-endpoint
            unevaluatedProperties: false

        anyOf:
          - required:
              - endpoint@0
          - required:
              - endpoint@1
          - required:
              - endpoint@2
          - required:
              - endpoint@3
          - required:
              - endpoint@4
          - required:
              - endpoint@5
          - required:
              - endpoint@6
          - required:
              - endpoint@7
          - required:
              - endpoint@8

      port@2:
        $ref: /schemas/graph.yaml#/$defs/port-base
        description:
          Input port to receive DisplayPort (DP) data
        unevaluatedProperties: false

        properties:
          endpoint:
            $ref: usb-switch.yaml#/$defs/dp-endpoint
            unevaluatedProperties: false

        required:
          - endpoint

    required:
      - port@0

    anyOf:
      - required:
          - port@1
      - required:
          - port@2

patternProperties:
  '^connector@[0-9a-f]+$':
    $ref: /schemas/connector/usb-connector.yaml#
    required:
      - reg

required:
  - compatible

allOf:
  - if:
      required:
        - no-hpd
    then:
      properties:
        ports:
          required:
            - port@2
  - if:
      required:
        - mux-gpios
    then:
      properties:
        ports:
          required:
            - port@2
  - if:
      required:
        - orientation-switch
    then:
      properties:
        ports:
          required:
            - port@2
  - if:
      required:
        - mode-switch
    then:
      properties:
        ports:
          required:
            - port@2

additionalProperties: false

examples:
  - |+
    spi {
      #address-cells = <1>;
      #size-cells = <0>;

      cros_ec: ec@0 {
        compatible = "google,cros-ec-spi";
        reg = <0>;
        interrupts = <35 0>;

        typec {
          compatible = "google,cros-ec-typec";
          orientation-switch;
          mode-switch;

          #address-cells = <1>;
          #size-cells = <0>;

          connector@0 {
            compatible = "usb-c-connector";
            reg = <0>;
            power-role = "dual";
            data-role = "dual";
            try-power-role = "source";

            ports {
              #address-cells = <1>;
              #size-cells = <0>;

              port@0 {
                reg = <0>;
                usb_c0_hs: endpoint {
                  remote-endpoint = <&usb_hub_dfp3_hs>;
                };
              };

              port@1 {
                reg = <1>;
                usb_c0_ss: endpoint {
                  remote-endpoint = <&cros_typec_c0_ss>;
                };
              };
            };
          };

          connector@1 {
            compatible = "usb-c-connector";
            reg = <1>;
            power-role = "dual";
            data-role = "dual";
            try-power-role = "source";

            ports {
              #address-cells = <1>;
              #size-cells = <0>;

              port@0 {
                reg = <0>;
                usb_c1_hs: endpoint {
                  remote-endpoint = <&usb_hub_dfp2_hs>;
                };
              };

              port@1 {
                reg = <1>;
                usb_c1_ss: endpoint {
                  remote-endpoint = <&cros_typec_c1_ss>;
                };
              };
            };
          };

          ports {
            #address-cells = <1>;
            #size-cells = <0>;

            port@0 {
              reg = <0>;
              #address-cells = <1>;
              #size-cells = <0>;

              cros_typec_c0_ss: endpoint@0 {
                reg = <0>;
                remote-endpoint = <&usb_c0_ss>;
                data-lanes = <0 1 2 3>;
              };

              cros_typec_c1_ss: endpoint@1 {
                reg = <1>;
                remote-endpoint = <&usb_c1_ss>;
                data-lanes = <2 3 0 1>;
              };
            };

            port@1 {
              reg = <1>;
              #address-cells = <1>;
              #size-cells = <0>;

              usb_in_0: endpoint@0 {
                reg = <0>;
                remote-endpoint = <&usb_ss_0_out>;
              };

              usb_in_1: endpoint@1 {
                reg = <1>;
                remote-endpoint = <&usb_ss_1_out>;
              };
            };

            port@2 {
              reg = <2>;
              dp_in: endpoint {
                remote-endpoint = <&dp_phy>;
                data-lanes = <0 1>;
              };
            };
          };
        };
      };
    };
